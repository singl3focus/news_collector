import asyncio
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from websocket import WebSocketApp

user_socket_connections = {}
TOKEN = "7603471934:AAGHOqMsthzpCsoxuY1zm2Uy0UqiGELIr5I"  # ‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω!

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìä –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É", "üß† Live –Ω–æ–≤–æ—Å—Ç–∏"]]  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,   # –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—å—à–µ
        one_time_keyboard=False # –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "üìä –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É":
        await update.message.reply_text("üìà –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É:\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∞–º–º–∞—Ä–∏)")

    elif text == "üß† Live –Ω–æ–≤–æ—Å—Ç–∏":
        await update.message.reply_text("üî¥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ live –Ω–æ–≤–æ—Å—Ç—è–º...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
        loop = asyncio.get_running_loop()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∫–µ—Ç —Å—Ç—Ä–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—ë–º loop
        start_socket_stream(user_id, context.bot, loop)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def start_socket_stream(user_id, bot, loop):
    def on_message(ws, message):
        print(f"–ù–æ–≤–æ—Å—Ç—å –¥–ª—è {user_id}: {message}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ run_coroutine_threadsafe
        asyncio.run_coroutine_threadsafe(
            bot.send_message(chat_id=user_id, text=f"üÜï –ù–æ–≤–æ—Å—Ç—å: {message}"),
            loop
        )

    def on_error(ws, error):
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: {error}")

    def on_close(ws, close_status_code, close_msg):
        print("–°–æ–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")

    def run_socket():
        ws = WebSocketApp(
            "ws://localhost:8765",  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ä–∞–±–æ—á–∏–π —Å–æ–∫–µ—Ç
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        ws.run_forever()

    if user_id not in user_socket_connections:
        thread = threading.Thread(target=run_socket, daemon=True)
        thread.start()
        user_socket_connections[user_id] = thread

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
