import asyncio
import json
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from websocket import WebSocketApp

user_socket_connections = {}
user_socket_stop_flags = {}
user_state = {}
user_tickers = {}
user_sources = {}

TOKEN = "7603471934:AAGHOqMsthzpCsoxuY1zm2Uy0UqiGELIr5I"  # üîí –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update):
    keyboard = [
        ["üìä –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É", "üß† Live –Ω–æ–≤–æ—Å—Ç–∏"],
        ["üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤", "üìã –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_settings_menu(update: Update):
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä—ã", "üóû –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏"],
        ["üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–∏–∫–µ—Ä—ã", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    state = user_state.get(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞
    if state == "awaiting_tickers":
        tickers = [t.strip() for t in text.split(",") if t.strip()]
        user_tickers[user_id] = tickers
        user_state.pop(user_id)
        await update.message.reply_text(f"‚úÖ –¢–∏–∫–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(tickers)}")
        await show_main_menu(update)
        return

    elif state == "awaiting_sources":
        sources = [s.strip() for s in text.split(",") if s.strip()]
        user_sources[user_id] = sources
        user_state.pop(user_id)
        await update.message.reply_text(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(sources)}")
        await show_main_menu(update)
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üìä –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É":
        await update.message.reply_text("üìà –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É:\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∞–º–º–∞—Ä–∏)")

    elif text == "üß† Live –Ω–æ–≤–æ—Å—Ç–∏":
        loop = asyncio.get_running_loop()
        start_socket_stream(user_id, context.bot, loop)
        keyboard = [["‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("Live –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω—ã", reply_markup=reply_markup)

    elif text == "‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        stop_socket_stream(user_id)
        await update.message.reply_text("üõë –ù–æ–≤–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        await show_main_menu(update)

    elif text == "üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤":
        tickers = user_tickers.get(user_id)
        if tickers:
            await update.message.reply_text(f"üìã –¢–≤–æ–∏ —Ç–∏–∫–µ—Ä—ã: {', '.join(tickers)}")
        else:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç.")

    elif text == "üìã –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤":
        sources = user_sources.get(user_id)
        if sources:
            await update.message.reply_text(f"üìã –¢–≤–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources)}")
        else:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await show_settings_menu(update)

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä—ã":
        user_state[user_id] = "awaiting_tickers"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: AAPL, TSLA, BTC):")

    elif text == "üóû –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏":
        user_state[user_id] = "awaiting_sources"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/example1, https://t.me/example2):")

    elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–∏–∫–µ—Ä—ã":
        if user_id in user_tickers:
            del user_tickers[user_id]
            await update.message.reply_text("üßº –¢–∏–∫–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã.")
        else:
            await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.")
        await show_settings_menu(update)

    elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏":
        if user_id in user_sources:
            del user_sources[user_id]
            await update.message.reply_text("üßº –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã.")
        else:
            await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        await show_settings_menu(update)

    elif text == "üîô –ù–∞–∑–∞–¥":
        await show_main_menu(update)

# WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
def start_socket_stream(user_id, bot, loop):
    stop_flag = threading.Event()
    user_socket_stop_flags[user_id] = stop_flag

    def on_message(ws, message):
        print(message)
        tmp = json.loads(message)
        if stop_flag.is_set():
            ws.close()
            return
        asyncio.run_coroutine_threadsafe(
            bot.send_message(chat_id=user_id, text=f"üÜï –ù–æ–≤–æ—Å—Ç—å: {tmp['text']}"),
            loop
        )

    def on_error(ws, error):
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: {error}")

    def on_close(ws, code, reason):
        print("–°–æ–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")

    def run_socket():
        ws = WebSocketApp(
            "ws://172.20.10.2:9999",
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        ws.run_forever()

    if user_id not in user_socket_connections:
        thread = threading.Thread(target=run_socket, daemon=True)
        thread.start()
        user_socket_connections[user_id] = thread

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–∫–µ—Ç–∞
def stop_socket_stream(user_id):
    if user_id in user_socket_stop_flags:
        user_socket_stop_flags[user_id].set()
        del user_socket_stop_flags[user_id]
    if user_id in user_socket_connections:
        del user_socket_connections[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
