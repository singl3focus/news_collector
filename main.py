import asyncio
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from websocket import WebSocketApp

user_socket_connections = {}
user_socket_stop_flags = {}

TOKEN = "7603471934:AAGHOqMsthzpCsoxuY1zm2Uy0UqiGELIr5I"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω


# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update)


async def show_main_menu(update: Update):
    keyboard = [["üìä –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É", "üß† Live –Ω–æ–≤–æ—Å—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "üìä –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É":
        await update.message.reply_text("üìà –û–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ä—ã–Ω–∫—É:\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∞–º–º–∞—Ä–∏)")

    elif text == "üß† Live –Ω–æ–≤–æ—Å—Ç–∏":
        loop = asyncio.get_running_loop()
        start_socket_stream(user_id, context.bot, loop)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        keyboard = [["‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("Live –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω—ã", reply_markup=reply_markup)

    elif text == "‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        stop_socket_stream(user_id)
        await update.message.reply_text("üõë –ù–æ–≤–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        await show_main_menu(update)


# –ó–∞–ø—É—Å–∫ WebSocket –≤ –ø–æ—Ç–æ–∫–µ
def start_socket_stream(user_id, bot, loop):
    stop_flag = threading.Event()
    user_socket_stop_flags[user_id] = stop_flag

    def on_message(ws, message):
        if stop_flag.is_set():
            ws.close()
            return
        asyncio.run_coroutine_threadsafe(
            bot.send_message(chat_id=user_id, text=f"üÜï –ù–æ–≤–æ—Å—Ç—å: {message}"),
            loop
        )

    def on_error(ws, error):
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: {error}")

    def on_close(ws, code, reason):
        print("–°–æ–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")

    def run_socket():
        ws = WebSocketApp(
            "ws://localhost:8765",
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        ws.run_forever()

    # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º
    if user_id not in user_socket_connections:
        thread = threading.Thread(target=run_socket, daemon=True)
        thread.start()
        user_socket_connections[user_id] = thread


# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –ø–æ—Ç–æ–∫–∞
def stop_socket_stream(user_id):
    if user_id in user_socket_stop_flags:
        user_socket_stop_flags[user_id].set()
        del user_socket_stop_flags[user_id]

    if user_id in user_socket_connections:
        # –ü–æ—Ç–æ–∫ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —Å–∞–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ stop_flag
        del user_socket_connections[user_id]


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
